# This is a basic workflow to help you get started with Actions
 
name: Flyway Dispatch Deploy Pipeline (Self-Hosted)
run-name: Deploy ${{ github.event.pull_request.head.ref }} merge/migration to ${{ github.event.pull_request.base.ref }}

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request review.  And then filtered later for approval.
  pull_request_review:
    types: [submitted]
    branch: task**
  
env:
  FLYWAY_LICENSE_KEY: ${{ secrets.FLYWAY_LICENSE_KEY }} #Repository Secret - Create this within the Projects Settings > Secrets > Actions section
  # If the first undo script is U002, this will validate all undo scripts up to and including that
  FIRST_UNDO_SCRIPT: ${{ secrets.FIRST_UNDO_SCRIPT }}
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: true 
 
# Allow one concurrent deployment
concurrency:
  group: "fwDeploy"
  cancel-in-progress: true


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prod:
    permissions:
      pull-requests: write
    name: Deploy Production
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    if: github.event.review.state == 'approved' #On approval
    env:
      stage: 'Prod'
      databaseName: ${{ secrets.databaseName}}
      JDBC: ${{ secrets.JDBC }}
      userName: ${{ secrets.userName }}
      password: ${{ secrets.password }}
      GITHUB_TOKEN: ${{ github.token }} 
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Comment Pull Request Pre Deploy
        run: |
          gh pr comment -R ${{ github.event.repository.full_name }} ${{ github.event.pull_request.head.ref }} --body "Starting Flyway Migration"

      # Runs the Flyway Migrate against the Production database
      - name: Migrate Build DB
        run: |
          flyway -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.conf" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" info migrate info -url="${{ env.JDBC }}" -cleanDisabled='false' > >(tee -a stdout.log) 2> >(tee -a stderr.log >&2)
          
      # Set Output
      - name: Get Output
        if: (${{ success() }}  || ${{ failure() }})
        id: fwLog
        run: |
          echo "STD_OUT=$(cat ./stdout.log)" >> $env:GITHUB_OUTPUT
          echo "STD_ERR=$(cat ./stderr.log)" >> $env:GITHUB_OUTPUT

      # Debug Output
      - name: Debug Output
        if: (${{ success() }}  || ${{ failure() }})
        run: |
          echo "${{ steps.fwLog.outputs.STD_OUT }}"
          echo "${{ steps.fwLog.outputs.STD_ERR }}"

      # # Add Output To PR comment 
      # - name: Comment PR With Output
      #   if: (${{ success() }}  || ${{ failure() }})
      #   run: |
      #     gh pr comment -R ${{ github.event.repository.full_name }} ${{ github.event.pull_request.head.ref }} --body-file ./output.log