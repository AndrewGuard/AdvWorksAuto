# This is a basic workflow to help you get started with Actions
 
name: Flyway Dispatch Deploy Pipeline (Self-Hosted)
run-name: Deploy ${{ github.event.pull_request.head.ref }} merge/migration to ${{ github.event.pull_request.base.ref }}

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request review.  And then filtered later for approval.
  pull_request_review:
    types: [submitted]
    branch: task**

env:
 
  FLYWAY_LICENSE_KEY: ${{ secrets.FLYWAY_LICENSE_KEY }} #Repository Secret - Create this within the Projects Settings > Secrets > Actions section
  # If the first undo script is U002, this will validate all undo scripts up to and including that
  FIRST_UNDO_SCRIPT: ${{ secrets.FIRST_UNDO_SCRIPT }}
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: true 
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prod:
    name: Deploy Production
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    if: github.event.review.state == 'approved' #On approval
    env:
      stage: 'Prod'
      databaseName: ${{ secrets.databaseName}}
      JDBC: ${{ secrets.JDBC }}
      userName: ${{ secrets.userName }}
      password: ${{ secrets.password }}
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      # Runs the Flyway Migrate against the Production database
      - name: Migrate Build DB
        run: |
          flyway -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}\flyway.conf" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" info migrate info -url="${{ env.JDBC }}" -cleanDisabled='false'
      
      - name: Comment Pull Request On Error
        if: (${{ failure() }})
        env: 
          GITHUB_TOKEN: ${{ github.token }} 
        run: |
          gh pr comment --body "FAILED DEPLOY!"